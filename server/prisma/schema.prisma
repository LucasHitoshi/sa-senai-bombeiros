generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  name     String?
  gender   String?
  password String
  isActive Boolean
  Reports  Report[]
}

model Report {
  id                       Int                        @id @default(autoincrement())
  createdAt                DateTime?                  @default(now())
  updatedAt                DateTime?                  @updatedAt
  reportDate               DateTime?
  name                     String?
  age                      Int?
  gender                   String?
  cpf                      String?
  phone                    String?
  reportPlace              String?
  bloodPressure            Int?
  bodyTemp                 Int?
  bodyPulse                Int?
  breathing                Int?
  saturation               Int?
  owner                    User                       @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  ownerId                  Int
  PreHospitalMethods       PreHospitalMethod[]
  Symptoms                 Symptoms[]
  GestationalAnamnesis     GestationalAnamnesis[]
  Anamnesis                Anamnesis[]
  SuspectProblems          SuspectProblems[]
  Glasglow                 Glasglow[]
  Report_PreHospitalMethod Report_PreHospitalMethod[]
  Report_Symptoms          Report_Symptoms[]
}

//  Tabela N para N entre relatório e método pré-hospitalar
model Report_PreHospitalMethod {
  id                       Int               @id @default(autoincrement())
  preHospitalMethodOwner   PreHospitalMethod @relation(fields: [PreHospitalMethodOwnerId], references: [id])
  reportOwner              Report            @relation(fields: [ReportOwnerId], references: [id])
  PreHospitalMethodOwnerId Int
  ReportOwnerId            Int

  @@unique([ReportOwnerId, PreHospitalMethodOwnerId])
}

//  Tabela N para N entre relatório e sintoma
model Report_Symptoms {
  id              Int      @id @default(autoincrement())
  symptomsOwner   Symptoms @relation(fields: [SymptomsOwnerId], references: [id])
  reportOwner     Report   @relation(fields: [ReportOwnerId], references: [id])
  SymptomsOwnerId Int
  ReportOwnerId   Int

  @@unique([ReportOwnerId, SymptomsOwnerId])
}

model PreHospitalMethod {
  id                       Int                        @id @default(autoincrement())
  description              String
  reportOwner              Report                     @relation(fields: [ReportOwnerId], references: [id], onDelete: Cascade)
  ReportOwnerId            Int
  Report_PreHospitalMethod Report_PreHospitalMethod[]
}

model Symptoms {
  id              Int               @id @default(autoincrement())
  description     String
  reportOwner     Report            @relation(fields: [ReportOwnerId], references: [id], onDelete: Cascade)
  ReportOwnerId   Int
  Report_Symptoms Report_Symptoms[]
}

model GestationalAnamnesis {
  id                  Int      @id @default(autoincrement())
  gestationalPeriod   DateTime
  PreNatal            Boolean
  DoctorName          String
  Complications       String
  NumberSon           Int
  ContractionSchedule DateTime
  Duration            DateTime
  Interval            DateTime
  HiPressure          Boolean
  BagRuptured         Boolean
  VisualInspection    Boolean
  Childbirth          Boolean
  BabyGender          String
  BornHour            DateTime
  BabyName            String
  FinalRemarks        String
  reportOwner         Report   @relation(fields: [ReportOwnerId], references: [id], onDelete: Cascade)
  ReportOwnerId       Int
}

model Anamnesis {
  id                 Int      @id @default(autoincrement())
  SignsAndSymptoms   String?
  HappenedTimes      Boolean?
  SinceHappened      String?
  HealthProblem      Boolean?
  HealthProlemsWhich String?
  Medication         Boolean?
  MedicationWhich    String?
  HourMedication     String?
  Allergies          Boolean?
  AllergiesWhich     String?
  IngestedFood       Boolean?
  WhatTimeFood       String?
  FinalRemarks       String?
  reportOwner        Report   @relation(fields: [ReportOwnerId], references: [id], onDelete: Cascade)
  ReportOwnerId      Int
}

model Glasglow {
  id                    Int    @id @default(autoincrement())
  reportOwner           Report @relation(fields: [ReportOwnerId], references: [id], onDelete: Cascade)
  ReportOwnerId         Int
  eyeOpeningOwnerId     Int
  verbalResponseOwnerId Int
  motorResponseOwnerId  Int
}

model SuspectProblems {
  id       Int        @id @default(autoincrement())
  Problem  Problems[]
  Another  String
  Report   Report?    @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int?
}

model Problems {
  id                Int              @id @default(autoincrement())
  Name              String
  Description       String
  SuspectProblems   SuspectProblems? @relation(fields: [suspectProblemsId], references: [id], onDelete: Cascade)
  suspectProblemsId Int?
}

model CinematicAvaliation {
  id                    Int     @id @default(autoincrement())
  comportamentalDisturb Boolean
  foundWithHelmet       Boolean
  foundWithSeatbelt     Boolean
  walkingInTheScene     Boolean
}
